package UtilityForIPMMessage;



import org.jpos.iso.ISOBinaryField;
import org.jpos.iso.ISOComponent;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOField;
import org.jpos.iso.ISOFieldPackager;
import org.jpos.iso.ISOUtil;
import org.jpos.iso.packager.TagMapper; 
 
import java.io.IOException; 
import java.io.InputStream; 
import java.io.ObjectOutput; 
 
/**
 * Base class and template for handling tagged fields. 
 * <p/> 
 * This should support both fixed length and variable length tags. 
 */ 
public abstract class PDSTaggedFieldPackager extends ISOFieldPackager { 
 
    private TagMapper tagMapper; 
    private ISOFieldPackager delegate; 
    private int parentFieldNumber; 
    private boolean packingLenient = false; 
    private boolean unpackingLenient = false; 
 
    public PDSTaggedFieldPackager() { 
        super(); 
    } 
 
    /**
     * @param len         - 
     *                    field len 
     * @param description symbolic description 
     */ 
    public PDSTaggedFieldPackager(int len, String description) { 
        super(len, description); 
        this.delegate = getDelegate(len, description); 
    } 
 
    /**
     * @param c - 
     *          a component 
     * @return packed component 
     * @throws org.jpos.iso.ISOException 
     */ 
    @Override 
    public byte[] pack(ISOComponent c) throws ISOException { 
        byte[] packed; 
        if (c.getValue() == null) { 
            packed = new byte[0]; 
        } else { 
            String tag = getTagMapper().getTagForField(getParentFieldNumber(), (Integer) c.getKey()); 
            if (tag == null) { 
                if (!isPackingLenient()) { 
                    throw new ISOException("No tag mapping found for field: " + parentFieldNumber + "." + c.getKey()); 
                } 
                packed = new byte[0]; 
            } else { 
                byte[] tagBytes = tag.getBytes(ISOUtil.CHARSET); 
                byte[] message = getDelegate().pack(c); 
                packed = new byte[tagBytes.length + message.length]; 
                System.arraycopy(tagBytes, 0, packed, 0, tagBytes.length); 
                System.arraycopy(message, 0, packed, tagBytes.length, message.length); 
            } 
        } 
        return packed; 
    } 
 
    @Override 
    public void pack(ISOComponent c, ObjectOutput out) throws IOException, ISOException { 
        if (c.getValue() != null) { 
            super.pack(c, out); 
        } 
    } 
 
    /**
     * @param c      - 
     *               the Component to unpack 
     * @param b      - 
     *               binary image 
     * @param offset - 
     *               starting offset within the binary image 
     * @return consumed bytes 
     * @throws ISOException 
     */ 
    @Override 
    public int unpack(ISOComponent c, byte[] b, int offset) throws ISOException { 
        int consumed; 
        byte[] tagBytes = new byte[getTagNameLength()]; 
        System.arraycopy(b, offset, tagBytes, 0, getTagNameLength()); 
        String tag = new String(tagBytes, ISOUtil.CHARSET); 
        if (!(c instanceof ISOField) && !(c instanceof ISOBinaryField)) 
            throw new ISOException(c.getClass().getName() 
                    + " is not an ISOField"); 
        Integer fieldNumber = getTagMapper().getFieldNumberForTag(getParentFieldNumber(), tag); 
        if (fieldNumber == null || fieldNumber < 0) { 
            if (!isUnpackingLenient()) { 
                throw new ISOException("No field mapping found for tag: " + parentFieldNumber + "." + tag); 
            } 
            consumed = 0; 
        } else { 
            if (c.getKey().equals(fieldNumber)) { 
                consumed = getTagNameLength() + getDelegate().unpack(c, b, offset + tagBytes.length); 
            } else { 
                consumed = 0; 
            } 
        } 
        return consumed; 
    } 
 
    @Override 
    public void unpack(ISOComponent c, InputStream in) throws IOException, 
            ISOException { 
        if (!in.markSupported()) { 
            throw new ISOException("InputStream should support marking"); 
        } 
        if (!(c instanceof ISOField)) 
            throw new ISOException(c.getClass().getName() 
                    + " is not an ISOField"); 
        in.mark(getTagNameLength() + 1); 
        Integer fieldNumber; 
        String tag; 
        tag = new String(readBytes(in, getTagNameLength()), ISOUtil.CHARSET); 
        fieldNumber = getTagMapper().getFieldNumberForTag(getParentFieldNumber(), tag); 
        if (fieldNumber == null || fieldNumber < 0) { 
            if (!isUnpackingLenient()) { 
                throw new ISOException("No field mapping found for tag: " + parentFieldNumber + "." + tag); 
            } 
            in.reset(); 
        } else { 
            if (c.getKey().equals(fieldNumber)) { 
                getDelegate().unpack(c, in); 
            } else { 
                in.reset(); 
            } 
        } 
    } 
 
    private synchronized ISOFieldPackager getDelegate() { 
        if (delegate == null) { 
            delegate = getDelegate(getLength(), getDescription()); 
        } 
        return delegate; 
    } 
 
    protected abstract ISOFieldPackager getDelegate(int len, String description); 
 
    protected abstract int getTagNameLength(); 
 
    /**
     * @return A boolean value for or against lenient packing 
     */ 
    protected boolean isPackingLenient() { 
        return packingLenient; 
    } 
 
    /**
     * @return A boolean value for or against lenient unpacking 
     */ 
    protected boolean isUnpackingLenient() { 
        return unpackingLenient; 
    } 
 
    public void setPackingLenient(boolean packingLenient) { 
        this.packingLenient = packingLenient; 
    } 
 
    public void setUnpackingLenient(boolean unpackingLenient) { 
        this.unpackingLenient = unpackingLenient; 
    } 
 
    @Override 
    public int getMaxPackedLength() { 
        return getTagNameLength() + getDelegate().getMaxPackedLength(); 
    } 
 
    public int getParentFieldNumber() { 
        return parentFieldNumber; 
    } 
 
    public void setParentFieldNumber(int parentFieldNumber) { 
        this.parentFieldNumber = parentFieldNumber; 
    } 
 
    public void setTagMapper(TagMapper tagMapper) { 
        this.tagMapper = tagMapper; 
    } 
 
    protected TagMapper getTagMapper() { 
        return tagMapper; 
    } 
 